/****************************************************
 *
 * ****     ***     ****    *   *    *****    *****
 * *  *    *   *   *        ****     ***        *
 * *   *    ***     ****    *   *    *****      *
 *
 * call_vote.h
 * 2024-04-23 15:28:24
 * Generated by rocket framework rocket_generator.py
 * File will not generate while exist
 * Allow editing
****************************************************/

#ifndef RAFT_SERVER_INTERFACE_CALL_VOTE_H
#define RAFT_SERVER_INTERFACE_CALL_VOTE_H 

#include <rocket/net/rpc/rpc_closure.h>
#include "../pb/raft_server.pb.h"
#include "../interface/interface.h"


namespace raft_server {

/*
 * Rpc Interface Class
 * Alloc one object every time RPC call begin, and destroy this object while RPC call end
*/

class CallVoteInterface : public Interface {
 public:

  CallVoteInterface(const ::callVoteRequest* request, ::callVoteResponse* response, 
    rocket::RpcClosure* done, rocket::RpcController* controller, bool log_checked, int term, int voted_for);

  ~CallVoteInterface();

 public:
  // core business deal method
  virtual void run() override;

  // set error code and error into to response message
  virtual void setError(int code, const std::string& err_info) override;

 private:
  const ::callVoteRequest* m_request {NULL};       // request object fron client

  ::callVoteResponse* m_response {NULL};           // response object that reply to client

  bool m_log_checked;
  
  int m_term;

  int m_voted_for;

};


}


#endif