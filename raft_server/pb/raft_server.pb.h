// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_5fserver_2eproto;
class appendLogRequest;
struct appendLogRequestDefaultTypeInternal;
extern appendLogRequestDefaultTypeInternal _appendLogRequest_default_instance_;
class appendLogResponse;
struct appendLogResponseDefaultTypeInternal;
extern appendLogResponseDefaultTypeInternal _appendLogResponse_default_instance_;
class callVoteRequest;
struct callVoteRequestDefaultTypeInternal;
extern callVoteRequestDefaultTypeInternal _callVoteRequest_default_instance_;
class callVoteResponse;
struct callVoteResponseDefaultTypeInternal;
extern callVoteResponseDefaultTypeInternal _callVoteResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::appendLogRequest* Arena::CreateMaybeMessage<::appendLogRequest>(Arena*);
template<> ::appendLogResponse* Arena::CreateMaybeMessage<::appendLogResponse>(Arena*);
template<> ::callVoteRequest* Arena::CreateMaybeMessage<::callVoteRequest>(Arena*);
template<> ::callVoteResponse* Arena::CreateMaybeMessage<::callVoteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class callVoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:callVoteRequest) */ {
 public:
  inline callVoteRequest() : callVoteRequest(nullptr) {}
  ~callVoteRequest() override;
  explicit constexpr callVoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  callVoteRequest(const callVoteRequest& from);
  callVoteRequest(callVoteRequest&& from) noexcept
    : callVoteRequest() {
    *this = ::std::move(from);
  }

  inline callVoteRequest& operator=(const callVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline callVoteRequest& operator=(callVoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const callVoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const callVoteRequest* internal_default_instance() {
    return reinterpret_cast<const callVoteRequest*>(
               &_callVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(callVoteRequest& a, callVoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(callVoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(callVoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  callVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<callVoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const callVoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const callVoteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(callVoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "callVoteRequest";
  }
  protected:
  explicit callVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIdxFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 candidate_id = 2;
  void clear_candidate_id();
  int32_t candidate_id() const;
  void set_candidate_id(int32_t value);
  private:
  int32_t _internal_candidate_id() const;
  void _internal_set_candidate_id(int32_t value);
  public:

  // int32 last_log_idx = 3;
  void clear_last_log_idx();
  int32_t last_log_idx() const;
  void set_last_log_idx(int32_t value);
  private:
  int32_t _internal_last_log_idx() const;
  void _internal_set_last_log_idx(int32_t value);
  public:

  // int32 last_log_term = 4;
  void clear_last_log_term();
  int32_t last_log_term() const;
  void set_last_log_term(int32_t value);
  private:
  int32_t _internal_last_log_term() const;
  void _internal_set_last_log_term(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:callVoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t term_;
  int32_t candidate_id_;
  int32_t last_log_idx_;
  int32_t last_log_term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserver_2eproto;
};
// -------------------------------------------------------------------

class callVoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:callVoteResponse) */ {
 public:
  inline callVoteResponse() : callVoteResponse(nullptr) {}
  ~callVoteResponse() override;
  explicit constexpr callVoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  callVoteResponse(const callVoteResponse& from);
  callVoteResponse(callVoteResponse&& from) noexcept
    : callVoteResponse() {
    *this = ::std::move(from);
  }

  inline callVoteResponse& operator=(const callVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline callVoteResponse& operator=(callVoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const callVoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const callVoteResponse* internal_default_instance() {
    return reinterpret_cast<const callVoteResponse*>(
               &_callVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(callVoteResponse& a, callVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(callVoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(callVoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  callVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<callVoteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const callVoteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const callVoteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(callVoteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "callVoteResponse";
  }
  protected:
  explicit callVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kTermFieldNumber = 3,
    kVoteGrantedFieldNumber = 4,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // int32 term = 3;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // bool vote_granted = 4;
  void clear_vote_granted();
  bool vote_granted() const;
  void set_vote_granted(bool value);
  private:
  bool _internal_vote_granted() const;
  void _internal_set_vote_granted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:callVoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  int32_t ret_code_;
  int32_t term_;
  bool vote_granted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserver_2eproto;
};
// -------------------------------------------------------------------

class appendLogRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appendLogRequest) */ {
 public:
  inline appendLogRequest() : appendLogRequest(nullptr) {}
  ~appendLogRequest() override;
  explicit constexpr appendLogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  appendLogRequest(const appendLogRequest& from);
  appendLogRequest(appendLogRequest&& from) noexcept
    : appendLogRequest() {
    *this = ::std::move(from);
  }

  inline appendLogRequest& operator=(const appendLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline appendLogRequest& operator=(appendLogRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const appendLogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const appendLogRequest* internal_default_instance() {
    return reinterpret_cast<const appendLogRequest*>(
               &_appendLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(appendLogRequest& a, appendLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(appendLogRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(appendLogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  appendLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<appendLogRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const appendLogRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const appendLogRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(appendLogRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appendLogRequest";
  }
  protected:
  explicit appendLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogEntriesFieldNumber = 5,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kPrevLogIdxFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 6,
  };
  // repeated string log_entries = 5;
  int log_entries_size() const;
  private:
  int _internal_log_entries_size() const;
  public:
  void clear_log_entries();
  const std::string& log_entries(int index) const;
  std::string* mutable_log_entries(int index);
  void set_log_entries(int index, const std::string& value);
  void set_log_entries(int index, std::string&& value);
  void set_log_entries(int index, const char* value);
  void set_log_entries(int index, const char* value, size_t size);
  std::string* add_log_entries();
  void add_log_entries(const std::string& value);
  void add_log_entries(std::string&& value);
  void add_log_entries(const char* value);
  void add_log_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& log_entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_log_entries();
  private:
  const std::string& _internal_log_entries(int index) const;
  std::string* _internal_add_log_entries();
  public:

  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 leader_id = 2;
  void clear_leader_id();
  int32_t leader_id() const;
  void set_leader_id(int32_t value);
  private:
  int32_t _internal_leader_id() const;
  void _internal_set_leader_id(int32_t value);
  public:

  // int32 prev_log_idx = 3;
  void clear_prev_log_idx();
  int32_t prev_log_idx() const;
  void set_prev_log_idx(int32_t value);
  private:
  int32_t _internal_prev_log_idx() const;
  void _internal_set_prev_log_idx(int32_t value);
  public:

  // int32 prev_log_term = 4;
  void clear_prev_log_term();
  int32_t prev_log_term() const;
  void set_prev_log_term(int32_t value);
  private:
  int32_t _internal_prev_log_term() const;
  void _internal_set_prev_log_term(int32_t value);
  public:

  // int32 leader_commit = 6;
  void clear_leader_commit();
  int32_t leader_commit() const;
  void set_leader_commit(int32_t value);
  private:
  int32_t _internal_leader_commit() const;
  void _internal_set_leader_commit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:appendLogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> log_entries_;
  int32_t term_;
  int32_t leader_id_;
  int32_t prev_log_idx_;
  int32_t prev_log_term_;
  int32_t leader_commit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserver_2eproto;
};
// -------------------------------------------------------------------

class appendLogResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:appendLogResponse) */ {
 public:
  inline appendLogResponse() : appendLogResponse(nullptr) {}
  ~appendLogResponse() override;
  explicit constexpr appendLogResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  appendLogResponse(const appendLogResponse& from);
  appendLogResponse(appendLogResponse&& from) noexcept
    : appendLogResponse() {
    *this = ::std::move(from);
  }

  inline appendLogResponse& operator=(const appendLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline appendLogResponse& operator=(appendLogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const appendLogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const appendLogResponse* internal_default_instance() {
    return reinterpret_cast<const appendLogResponse*>(
               &_appendLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(appendLogResponse& a, appendLogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(appendLogResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(appendLogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  appendLogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<appendLogResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const appendLogResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const appendLogResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(appendLogResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "appendLogResponse";
  }
  protected:
  explicit appendLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kTermFieldNumber = 3,
    kSuccessFieldNumber = 4,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // int32 term = 3;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // bool success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:appendLogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  int32_t ret_code_;
  int32_t term_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserver_2eproto;
};
// ===================================================================

class RaftServer_Stub;

class RaftServer : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftServer() {};
 public:
  virtual ~RaftServer();

  typedef RaftServer_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void call_vote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::callVoteRequest* request,
                       ::callVoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void append_log(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::appendLogRequest* request,
                       ::appendLogResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftServer);
};

class RaftServer_Stub : public RaftServer {
 public:
  RaftServer_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RaftServer_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RaftServer_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RaftServer ------------------------------------------

  void call_vote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::callVoteRequest* request,
                       ::callVoteResponse* response,
                       ::google::protobuf::Closure* done);
  void append_log(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::appendLogRequest* request,
                       ::appendLogResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftServer_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// callVoteRequest

// int32 term = 1;
inline void callVoteRequest::clear_term() {
  term_ = 0;
}
inline int32_t callVoteRequest::_internal_term() const {
  return term_;
}
inline int32_t callVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:callVoteRequest.term)
  return _internal_term();
}
inline void callVoteRequest::_internal_set_term(int32_t value) {
  
  term_ = value;
}
inline void callVoteRequest::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:callVoteRequest.term)
}

// int32 candidate_id = 2;
inline void callVoteRequest::clear_candidate_id() {
  candidate_id_ = 0;
}
inline int32_t callVoteRequest::_internal_candidate_id() const {
  return candidate_id_;
}
inline int32_t callVoteRequest::candidate_id() const {
  // @@protoc_insertion_point(field_get:callVoteRequest.candidate_id)
  return _internal_candidate_id();
}
inline void callVoteRequest::_internal_set_candidate_id(int32_t value) {
  
  candidate_id_ = value;
}
inline void callVoteRequest::set_candidate_id(int32_t value) {
  _internal_set_candidate_id(value);
  // @@protoc_insertion_point(field_set:callVoteRequest.candidate_id)
}

// int32 last_log_idx = 3;
inline void callVoteRequest::clear_last_log_idx() {
  last_log_idx_ = 0;
}
inline int32_t callVoteRequest::_internal_last_log_idx() const {
  return last_log_idx_;
}
inline int32_t callVoteRequest::last_log_idx() const {
  // @@protoc_insertion_point(field_get:callVoteRequest.last_log_idx)
  return _internal_last_log_idx();
}
inline void callVoteRequest::_internal_set_last_log_idx(int32_t value) {
  
  last_log_idx_ = value;
}
inline void callVoteRequest::set_last_log_idx(int32_t value) {
  _internal_set_last_log_idx(value);
  // @@protoc_insertion_point(field_set:callVoteRequest.last_log_idx)
}

// int32 last_log_term = 4;
inline void callVoteRequest::clear_last_log_term() {
  last_log_term_ = 0;
}
inline int32_t callVoteRequest::_internal_last_log_term() const {
  return last_log_term_;
}
inline int32_t callVoteRequest::last_log_term() const {
  // @@protoc_insertion_point(field_get:callVoteRequest.last_log_term)
  return _internal_last_log_term();
}
inline void callVoteRequest::_internal_set_last_log_term(int32_t value) {
  
  last_log_term_ = value;
}
inline void callVoteRequest::set_last_log_term(int32_t value) {
  _internal_set_last_log_term(value);
  // @@protoc_insertion_point(field_set:callVoteRequest.last_log_term)
}

// -------------------------------------------------------------------

// callVoteResponse

// int32 ret_code = 1;
inline void callVoteResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t callVoteResponse::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t callVoteResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:callVoteResponse.ret_code)
  return _internal_ret_code();
}
inline void callVoteResponse::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void callVoteResponse::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:callVoteResponse.ret_code)
}

// string res_info = 2;
inline void callVoteResponse::clear_res_info() {
  res_info_.ClearToEmpty();
}
inline const std::string& callVoteResponse::res_info() const {
  // @@protoc_insertion_point(field_get:callVoteResponse.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void callVoteResponse::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:callVoteResponse.res_info)
}
inline std::string* callVoteResponse::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:callVoteResponse.res_info)
  return _s;
}
inline const std::string& callVoteResponse::_internal_res_info() const {
  return res_info_.Get();
}
inline void callVoteResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* callVoteResponse::_internal_mutable_res_info() {
  
  return res_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* callVoteResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:callVoteResponse.res_info)
  return res_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void callVoteResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (res_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:callVoteResponse.res_info)
}

// int32 term = 3;
inline void callVoteResponse::clear_term() {
  term_ = 0;
}
inline int32_t callVoteResponse::_internal_term() const {
  return term_;
}
inline int32_t callVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:callVoteResponse.term)
  return _internal_term();
}
inline void callVoteResponse::_internal_set_term(int32_t value) {
  
  term_ = value;
}
inline void callVoteResponse::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:callVoteResponse.term)
}

// bool vote_granted = 4;
inline void callVoteResponse::clear_vote_granted() {
  vote_granted_ = false;
}
inline bool callVoteResponse::_internal_vote_granted() const {
  return vote_granted_;
}
inline bool callVoteResponse::vote_granted() const {
  // @@protoc_insertion_point(field_get:callVoteResponse.vote_granted)
  return _internal_vote_granted();
}
inline void callVoteResponse::_internal_set_vote_granted(bool value) {
  
  vote_granted_ = value;
}
inline void callVoteResponse::set_vote_granted(bool value) {
  _internal_set_vote_granted(value);
  // @@protoc_insertion_point(field_set:callVoteResponse.vote_granted)
}

// -------------------------------------------------------------------

// appendLogRequest

// int32 term = 1;
inline void appendLogRequest::clear_term() {
  term_ = 0;
}
inline int32_t appendLogRequest::_internal_term() const {
  return term_;
}
inline int32_t appendLogRequest::term() const {
  // @@protoc_insertion_point(field_get:appendLogRequest.term)
  return _internal_term();
}
inline void appendLogRequest::_internal_set_term(int32_t value) {
  
  term_ = value;
}
inline void appendLogRequest::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:appendLogRequest.term)
}

// int32 leader_id = 2;
inline void appendLogRequest::clear_leader_id() {
  leader_id_ = 0;
}
inline int32_t appendLogRequest::_internal_leader_id() const {
  return leader_id_;
}
inline int32_t appendLogRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:appendLogRequest.leader_id)
  return _internal_leader_id();
}
inline void appendLogRequest::_internal_set_leader_id(int32_t value) {
  
  leader_id_ = value;
}
inline void appendLogRequest::set_leader_id(int32_t value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:appendLogRequest.leader_id)
}

// int32 prev_log_idx = 3;
inline void appendLogRequest::clear_prev_log_idx() {
  prev_log_idx_ = 0;
}
inline int32_t appendLogRequest::_internal_prev_log_idx() const {
  return prev_log_idx_;
}
inline int32_t appendLogRequest::prev_log_idx() const {
  // @@protoc_insertion_point(field_get:appendLogRequest.prev_log_idx)
  return _internal_prev_log_idx();
}
inline void appendLogRequest::_internal_set_prev_log_idx(int32_t value) {
  
  prev_log_idx_ = value;
}
inline void appendLogRequest::set_prev_log_idx(int32_t value) {
  _internal_set_prev_log_idx(value);
  // @@protoc_insertion_point(field_set:appendLogRequest.prev_log_idx)
}

// int32 prev_log_term = 4;
inline void appendLogRequest::clear_prev_log_term() {
  prev_log_term_ = 0;
}
inline int32_t appendLogRequest::_internal_prev_log_term() const {
  return prev_log_term_;
}
inline int32_t appendLogRequest::prev_log_term() const {
  // @@protoc_insertion_point(field_get:appendLogRequest.prev_log_term)
  return _internal_prev_log_term();
}
inline void appendLogRequest::_internal_set_prev_log_term(int32_t value) {
  
  prev_log_term_ = value;
}
inline void appendLogRequest::set_prev_log_term(int32_t value) {
  _internal_set_prev_log_term(value);
  // @@protoc_insertion_point(field_set:appendLogRequest.prev_log_term)
}

// repeated string log_entries = 5;
inline int appendLogRequest::_internal_log_entries_size() const {
  return log_entries_.size();
}
inline int appendLogRequest::log_entries_size() const {
  return _internal_log_entries_size();
}
inline void appendLogRequest::clear_log_entries() {
  log_entries_.Clear();
}
inline std::string* appendLogRequest::add_log_entries() {
  std::string* _s = _internal_add_log_entries();
  // @@protoc_insertion_point(field_add_mutable:appendLogRequest.log_entries)
  return _s;
}
inline const std::string& appendLogRequest::_internal_log_entries(int index) const {
  return log_entries_.Get(index);
}
inline const std::string& appendLogRequest::log_entries(int index) const {
  // @@protoc_insertion_point(field_get:appendLogRequest.log_entries)
  return _internal_log_entries(index);
}
inline std::string* appendLogRequest::mutable_log_entries(int index) {
  // @@protoc_insertion_point(field_mutable:appendLogRequest.log_entries)
  return log_entries_.Mutable(index);
}
inline void appendLogRequest::set_log_entries(int index, const std::string& value) {
  log_entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:appendLogRequest.log_entries)
}
inline void appendLogRequest::set_log_entries(int index, std::string&& value) {
  log_entries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:appendLogRequest.log_entries)
}
inline void appendLogRequest::set_log_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  log_entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:appendLogRequest.log_entries)
}
inline void appendLogRequest::set_log_entries(int index, const char* value, size_t size) {
  log_entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:appendLogRequest.log_entries)
}
inline std::string* appendLogRequest::_internal_add_log_entries() {
  return log_entries_.Add();
}
inline void appendLogRequest::add_log_entries(const std::string& value) {
  log_entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:appendLogRequest.log_entries)
}
inline void appendLogRequest::add_log_entries(std::string&& value) {
  log_entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:appendLogRequest.log_entries)
}
inline void appendLogRequest::add_log_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  log_entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:appendLogRequest.log_entries)
}
inline void appendLogRequest::add_log_entries(const char* value, size_t size) {
  log_entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:appendLogRequest.log_entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
appendLogRequest::log_entries() const {
  // @@protoc_insertion_point(field_list:appendLogRequest.log_entries)
  return log_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
appendLogRequest::mutable_log_entries() {
  // @@protoc_insertion_point(field_mutable_list:appendLogRequest.log_entries)
  return &log_entries_;
}

// int32 leader_commit = 6;
inline void appendLogRequest::clear_leader_commit() {
  leader_commit_ = 0;
}
inline int32_t appendLogRequest::_internal_leader_commit() const {
  return leader_commit_;
}
inline int32_t appendLogRequest::leader_commit() const {
  // @@protoc_insertion_point(field_get:appendLogRequest.leader_commit)
  return _internal_leader_commit();
}
inline void appendLogRequest::_internal_set_leader_commit(int32_t value) {
  
  leader_commit_ = value;
}
inline void appendLogRequest::set_leader_commit(int32_t value) {
  _internal_set_leader_commit(value);
  // @@protoc_insertion_point(field_set:appendLogRequest.leader_commit)
}

// -------------------------------------------------------------------

// appendLogResponse

// int32 ret_code = 1;
inline void appendLogResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t appendLogResponse::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t appendLogResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:appendLogResponse.ret_code)
  return _internal_ret_code();
}
inline void appendLogResponse::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void appendLogResponse::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:appendLogResponse.ret_code)
}

// string res_info = 2;
inline void appendLogResponse::clear_res_info() {
  res_info_.ClearToEmpty();
}
inline const std::string& appendLogResponse::res_info() const {
  // @@protoc_insertion_point(field_get:appendLogResponse.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void appendLogResponse::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:appendLogResponse.res_info)
}
inline std::string* appendLogResponse::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:appendLogResponse.res_info)
  return _s;
}
inline const std::string& appendLogResponse::_internal_res_info() const {
  return res_info_.Get();
}
inline void appendLogResponse::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* appendLogResponse::_internal_mutable_res_info() {
  
  return res_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* appendLogResponse::release_res_info() {
  // @@protoc_insertion_point(field_release:appendLogResponse.res_info)
  return res_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void appendLogResponse::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (res_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:appendLogResponse.res_info)
}

// int32 term = 3;
inline void appendLogResponse::clear_term() {
  term_ = 0;
}
inline int32_t appendLogResponse::_internal_term() const {
  return term_;
}
inline int32_t appendLogResponse::term() const {
  // @@protoc_insertion_point(field_get:appendLogResponse.term)
  return _internal_term();
}
inline void appendLogResponse::_internal_set_term(int32_t value) {
  
  term_ = value;
}
inline void appendLogResponse::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:appendLogResponse.term)
}

// bool success = 4;
inline void appendLogResponse::clear_success() {
  success_ = false;
}
inline bool appendLogResponse::_internal_success() const {
  return success_;
}
inline bool appendLogResponse::success() const {
  // @@protoc_insertion_point(field_get:appendLogResponse.success)
  return _internal_success();
}
inline void appendLogResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void appendLogResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:appendLogResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_5fserver_2eproto
