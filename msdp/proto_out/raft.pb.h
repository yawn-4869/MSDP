// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto;
class LogEntryMessage;
struct LogEntryMessageDefaultTypeInternal;
extern LogEntryMessageDefaultTypeInternal _LogEntryMessage_default_instance_;
class LogsMessage;
struct LogsMessageDefaultTypeInternal;
extern LogsMessageDefaultTypeInternal _LogsMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LogEntryMessage* Arena::CreateMaybeMessage<::LogEntryMessage>(Arena*);
template<> ::LogsMessage* Arena::CreateMaybeMessage<::LogsMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class LogEntryMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogEntryMessage) */ {
 public:
  inline LogEntryMessage() : LogEntryMessage(nullptr) {}
  ~LogEntryMessage() override;
  explicit constexpr LogEntryMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogEntryMessage(const LogEntryMessage& from);
  LogEntryMessage(LogEntryMessage&& from) noexcept
    : LogEntryMessage() {
    *this = ::std::move(from);
  }

  inline LogEntryMessage& operator=(const LogEntryMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntryMessage& operator=(LogEntryMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntryMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntryMessage* internal_default_instance() {
    return reinterpret_cast<const LogEntryMessage*>(
               &_LogEntryMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogEntryMessage& a, LogEntryMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntryMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntryMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntryMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogEntryMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogEntryMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogEntryMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntryMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogEntryMessage";
  }
  protected:
  explicit LogEntryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMCommandFieldNumber = 2,
    kMTermFieldNumber = 1,
    kMIdxFieldNumber = 3,
  };
  // string m_command = 2;
  void clear_m_command();
  const std::string& m_command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m_command();
  PROTOBUF_NODISCARD std::string* release_m_command();
  void set_allocated_m_command(std::string* m_command);
  private:
  const std::string& _internal_m_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_command(const std::string& value);
  std::string* _internal_mutable_m_command();
  public:

  // int32 m_term = 1;
  void clear_m_term();
  int32_t m_term() const;
  void set_m_term(int32_t value);
  private:
  int32_t _internal_m_term() const;
  void _internal_set_m_term(int32_t value);
  public:

  // int32 m_idx = 3;
  void clear_m_idx();
  int32_t m_idx() const;
  void set_m_idx(int32_t value);
  private:
  int32_t _internal_m_idx() const;
  void _internal_set_m_idx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LogEntryMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_command_;
  int32_t m_term_;
  int32_t m_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class LogsMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogsMessage) */ {
 public:
  inline LogsMessage() : LogsMessage(nullptr) {}
  ~LogsMessage() override;
  explicit constexpr LogsMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogsMessage(const LogsMessage& from);
  LogsMessage(LogsMessage&& from) noexcept
    : LogsMessage() {
    *this = ::std::move(from);
  }

  inline LogsMessage& operator=(const LogsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogsMessage& operator=(LogsMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogsMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogsMessage* internal_default_instance() {
    return reinterpret_cast<const LogsMessage*>(
               &_LogsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogsMessage& a, LogsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LogsMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogsMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogsMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogsMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogsMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogsMessage";
  }
  protected:
  explicit LogsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .LogEntryMessage entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::LogEntryMessage* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogEntryMessage >*
      mutable_entries();
  private:
  const ::LogEntryMessage& _internal_entries(int index) const;
  ::LogEntryMessage* _internal_add_entries();
  public:
  const ::LogEntryMessage& entries(int index) const;
  ::LogEntryMessage* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogEntryMessage >&
      entries() const;

  // @@protoc_insertion_point(class_scope:LogsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogEntryMessage > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEntryMessage

// int32 m_term = 1;
inline void LogEntryMessage::clear_m_term() {
  m_term_ = 0;
}
inline int32_t LogEntryMessage::_internal_m_term() const {
  return m_term_;
}
inline int32_t LogEntryMessage::m_term() const {
  // @@protoc_insertion_point(field_get:LogEntryMessage.m_term)
  return _internal_m_term();
}
inline void LogEntryMessage::_internal_set_m_term(int32_t value) {
  
  m_term_ = value;
}
inline void LogEntryMessage::set_m_term(int32_t value) {
  _internal_set_m_term(value);
  // @@protoc_insertion_point(field_set:LogEntryMessage.m_term)
}

// string m_command = 2;
inline void LogEntryMessage::clear_m_command() {
  m_command_.ClearToEmpty();
}
inline const std::string& LogEntryMessage::m_command() const {
  // @@protoc_insertion_point(field_get:LogEntryMessage.m_command)
  return _internal_m_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntryMessage::set_m_command(ArgT0&& arg0, ArgT... args) {
 
 m_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LogEntryMessage.m_command)
}
inline std::string* LogEntryMessage::mutable_m_command() {
  std::string* _s = _internal_mutable_m_command();
  // @@protoc_insertion_point(field_mutable:LogEntryMessage.m_command)
  return _s;
}
inline const std::string& LogEntryMessage::_internal_m_command() const {
  return m_command_.Get();
}
inline void LogEntryMessage::_internal_set_m_command(const std::string& value) {
  
  m_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogEntryMessage::_internal_mutable_m_command() {
  
  return m_command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogEntryMessage::release_m_command() {
  // @@protoc_insertion_point(field_release:LogEntryMessage.m_command)
  return m_command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogEntryMessage::set_allocated_m_command(std::string* m_command) {
  if (m_command != nullptr) {
    
  } else {
    
  }
  m_command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (m_command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    m_command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LogEntryMessage.m_command)
}

// int32 m_idx = 3;
inline void LogEntryMessage::clear_m_idx() {
  m_idx_ = 0;
}
inline int32_t LogEntryMessage::_internal_m_idx() const {
  return m_idx_;
}
inline int32_t LogEntryMessage::m_idx() const {
  // @@protoc_insertion_point(field_get:LogEntryMessage.m_idx)
  return _internal_m_idx();
}
inline void LogEntryMessage::_internal_set_m_idx(int32_t value) {
  
  m_idx_ = value;
}
inline void LogEntryMessage::set_m_idx(int32_t value) {
  _internal_set_m_idx(value);
  // @@protoc_insertion_point(field_set:LogEntryMessage.m_idx)
}

// -------------------------------------------------------------------

// LogsMessage

// repeated .LogEntryMessage entries = 1;
inline int LogsMessage::_internal_entries_size() const {
  return entries_.size();
}
inline int LogsMessage::entries_size() const {
  return _internal_entries_size();
}
inline void LogsMessage::clear_entries() {
  entries_.Clear();
}
inline ::LogEntryMessage* LogsMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:LogsMessage.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogEntryMessage >*
LogsMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:LogsMessage.entries)
  return &entries_;
}
inline const ::LogEntryMessage& LogsMessage::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::LogEntryMessage& LogsMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:LogsMessage.entries)
  return _internal_entries(index);
}
inline ::LogEntryMessage* LogsMessage::_internal_add_entries() {
  return entries_.Add();
}
inline ::LogEntryMessage* LogsMessage::add_entries() {
  ::LogEntryMessage* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:LogsMessage.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogEntryMessage >&
LogsMessage::entries() const {
  // @@protoc_insertion_point(field_list:LogsMessage.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
