// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fusion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fusion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fusion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fusion_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fusion_2eproto;
class AssTrackMessage;
struct AssTrackMessageDefaultTypeInternal;
extern AssTrackMessageDefaultTypeInternal _AssTrackMessage_default_instance_;
class FusionRetMessage;
struct FusionRetMessageDefaultTypeInternal;
extern FusionRetMessageDefaultTypeInternal _FusionRetMessage_default_instance_;
class FusionUnitMessage;
struct FusionUnitMessageDefaultTypeInternal;
extern FusionUnitMessageDefaultTypeInternal _FusionUnitMessage_default_instance_;
class FusionUnitMessage_AssMapEntry_DoNotUse;
struct FusionUnitMessage_AssMapEntry_DoNotUseDefaultTypeInternal;
extern FusionUnitMessage_AssMapEntry_DoNotUseDefaultTypeInternal _FusionUnitMessage_AssMapEntry_DoNotUse_default_instance_;
class RadarTrackMessage;
struct RadarTrackMessageDefaultTypeInternal;
extern RadarTrackMessageDefaultTypeInternal _RadarTrackMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AssTrackMessage* Arena::CreateMaybeMessage<::AssTrackMessage>(Arena*);
template<> ::FusionRetMessage* Arena::CreateMaybeMessage<::FusionRetMessage>(Arena*);
template<> ::FusionUnitMessage* Arena::CreateMaybeMessage<::FusionUnitMessage>(Arena*);
template<> ::FusionUnitMessage_AssMapEntry_DoNotUse* Arena::CreateMaybeMessage<::FusionUnitMessage_AssMapEntry_DoNotUse>(Arena*);
template<> ::RadarTrackMessage* Arena::CreateMaybeMessage<::RadarTrackMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RadarTrackMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RadarTrackMessage) */ {
 public:
  inline RadarTrackMessage() : RadarTrackMessage(nullptr) {}
  ~RadarTrackMessage() override;
  explicit constexpr RadarTrackMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadarTrackMessage(const RadarTrackMessage& from);
  RadarTrackMessage(RadarTrackMessage&& from) noexcept
    : RadarTrackMessage() {
    *this = ::std::move(from);
  }

  inline RadarTrackMessage& operator=(const RadarTrackMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarTrackMessage& operator=(RadarTrackMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RadarTrackMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadarTrackMessage* internal_default_instance() {
    return reinterpret_cast<const RadarTrackMessage*>(
               &_RadarTrackMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadarTrackMessage& a, RadarTrackMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarTrackMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarTrackMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RadarTrackMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RadarTrackMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RadarTrackMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RadarTrackMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarTrackMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RadarTrackMessage";
  }
  protected:
  explicit RadarTrackMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallNoFieldNumber = 5,
    kAddressFieldNumber = 2,
    kIdFieldNumber = 1,
    kSSRFieldNumber = 4,
    kTrackNoFieldNumber = 3,
    kFXFieldNumber = 6,
    kFYFieldNumber = 7,
    kRhoFieldNumber = 9,
    kThetaFieldNumber = 10,
    kXyflgFieldNumber = 8,
    kRtflgFieldNumber = 11,
    kHeiFieldNumber = 12,
    kLonFieldNumber = 13,
    kLatFieldNumber = 14,
    kVecFieldNumber = 15,
    kCourceFieldNumber = 16,
    kVzFieldNumber = 17,
    kTimeFieldNumber = 18,
    kCurrTimeFieldNumber = 19,
    kAfterExtraTFieldNumber = 21,
    kExtraCountFieldNumber = 20,
  };
  // string callNo = 5;
  void clear_callno();
  const std::string& callno() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callno(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callno();
  PROTOBUF_NODISCARD std::string* release_callno();
  void set_allocated_callno(std::string* callno);
  private:
  const std::string& _internal_callno() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callno(const std::string& value);
  std::string* _internal_mutable_callno();
  public:

  // int64 Address = 2;
  void clear_address();
  int64_t address() const;
  void set_address(int64_t value);
  private:
  int64_t _internal_address() const;
  void _internal_set_address(int64_t value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 SSR = 4;
  void clear_ssr();
  int32_t ssr() const;
  void set_ssr(int32_t value);
  private:
  int32_t _internal_ssr() const;
  void _internal_set_ssr(int32_t value);
  public:

  // int64 TrackNo = 3;
  void clear_trackno();
  int64_t trackno() const;
  void set_trackno(int64_t value);
  private:
  int64_t _internal_trackno() const;
  void _internal_set_trackno(int64_t value);
  public:

  // double fX = 6;
  void clear_fx();
  double fx() const;
  void set_fx(double value);
  private:
  double _internal_fx() const;
  void _internal_set_fx(double value);
  public:

  // double fY = 7;
  void clear_fy();
  double fy() const;
  void set_fy(double value);
  private:
  double _internal_fy() const;
  void _internal_set_fy(double value);
  public:

  // double rho = 9;
  void clear_rho();
  double rho() const;
  void set_rho(double value);
  private:
  double _internal_rho() const;
  void _internal_set_rho(double value);
  public:

  // double theta = 10;
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // bool xyflg = 8;
  void clear_xyflg();
  bool xyflg() const;
  void set_xyflg(bool value);
  private:
  bool _internal_xyflg() const;
  void _internal_set_xyflg(bool value);
  public:

  // bool rtflg = 11;
  void clear_rtflg();
  bool rtflg() const;
  void set_rtflg(bool value);
  private:
  bool _internal_rtflg() const;
  void _internal_set_rtflg(bool value);
  public:

  // int32 Hei = 12;
  void clear_hei();
  int32_t hei() const;
  void set_hei(int32_t value);
  private:
  int32_t _internal_hei() const;
  void _internal_set_hei(int32_t value);
  public:

  // double Lon = 13;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double Lat = 14;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double vec = 15;
  void clear_vec();
  double vec() const;
  void set_vec(double value);
  private:
  double _internal_vec() const;
  void _internal_set_vec(double value);
  public:

  // double cource = 16;
  void clear_cource();
  double cource() const;
  void set_cource(double value);
  private:
  double _internal_cource() const;
  void _internal_set_cource(double value);
  public:

  // double vz = 17;
  void clear_vz();
  double vz() const;
  void set_vz(double value);
  private:
  double _internal_vz() const;
  void _internal_set_vz(double value);
  public:

  // int64 Time = 18;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 currTime = 19;
  void clear_currtime();
  int64_t currtime() const;
  void set_currtime(int64_t value);
  private:
  int64_t _internal_currtime() const;
  void _internal_set_currtime(int64_t value);
  public:

  // int64 afterExtraT = 21;
  void clear_afterextrat();
  int64_t afterextrat() const;
  void set_afterextrat(int64_t value);
  private:
  int64_t _internal_afterextrat() const;
  void _internal_set_afterextrat(int64_t value);
  public:

  // int32 extraCount = 20;
  void clear_extracount();
  int32_t extracount() const;
  void set_extracount(int32_t value);
  private:
  int32_t _internal_extracount() const;
  void _internal_set_extracount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RadarTrackMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callno_;
  int64_t address_;
  int32_t id_;
  int32_t ssr_;
  int64_t trackno_;
  double fx_;
  double fy_;
  double rho_;
  double theta_;
  bool xyflg_;
  bool rtflg_;
  int32_t hei_;
  double lon_;
  double lat_;
  double vec_;
  double cource_;
  double vz_;
  int64_t time_;
  int64_t currtime_;
  int64_t afterextrat_;
  int32_t extracount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fusion_2eproto;
};
// -------------------------------------------------------------------

class AssTrackMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AssTrackMessage) */ {
 public:
  inline AssTrackMessage() : AssTrackMessage(nullptr) {}
  ~AssTrackMessage() override;
  explicit constexpr AssTrackMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssTrackMessage(const AssTrackMessage& from);
  AssTrackMessage(AssTrackMessage&& from) noexcept
    : AssTrackMessage() {
    *this = ::std::move(from);
  }

  inline AssTrackMessage& operator=(const AssTrackMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssTrackMessage& operator=(AssTrackMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssTrackMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssTrackMessage* internal_default_instance() {
    return reinterpret_cast<const AssTrackMessage*>(
               &_AssTrackMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AssTrackMessage& a, AssTrackMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AssTrackMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssTrackMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssTrackMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssTrackMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssTrackMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssTrackMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssTrackMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AssTrackMessage";
  }
  protected:
  explicit AssTrackMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitTrackVecFieldNumber = 1,
    kWeightFieldNumber = 2,
    kUnitTrackTermCountFieldNumber = 3,
  };
  // repeated .RadarTrackMessage unitTrackVec = 1;
  int unittrackvec_size() const;
  private:
  int _internal_unittrackvec_size() const;
  public:
  void clear_unittrackvec();
  ::RadarTrackMessage* mutable_unittrackvec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RadarTrackMessage >*
      mutable_unittrackvec();
  private:
  const ::RadarTrackMessage& _internal_unittrackvec(int index) const;
  ::RadarTrackMessage* _internal_add_unittrackvec();
  public:
  const ::RadarTrackMessage& unittrackvec(int index) const;
  ::RadarTrackMessage* add_unittrackvec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RadarTrackMessage >&
      unittrackvec() const;

  // double weight = 2;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // int32 unitTrackTermCount = 3;
  void clear_unittracktermcount();
  int32_t unittracktermcount() const;
  void set_unittracktermcount(int32_t value);
  private:
  int32_t _internal_unittracktermcount() const;
  void _internal_set_unittracktermcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AssTrackMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RadarTrackMessage > unittrackvec_;
  double weight_;
  int32_t unittracktermcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fusion_2eproto;
};
// -------------------------------------------------------------------

class FusionRetMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FusionRetMessage) */ {
 public:
  inline FusionRetMessage() : FusionRetMessage(nullptr) {}
  ~FusionRetMessage() override;
  explicit constexpr FusionRetMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionRetMessage(const FusionRetMessage& from);
  FusionRetMessage(FusionRetMessage&& from) noexcept
    : FusionRetMessage() {
    *this = ::std::move(from);
  }

  inline FusionRetMessage& operator=(const FusionRetMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionRetMessage& operator=(FusionRetMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionRetMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionRetMessage* internal_default_instance() {
    return reinterpret_cast<const FusionRetMessage*>(
               &_FusionRetMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FusionRetMessage& a, FusionRetMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionRetMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionRetMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionRetMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionRetMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionRetMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FusionRetMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionRetMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FusionRetMessage";
  }
  protected:
  explicit FusionRetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallNoFieldNumber = 11,
    kFXFieldNumber = 1,
    kFYFieldNumber = 2,
    kFHeadFieldNumber = 3,
    kFHeiFieldNumber = 4,
    kFVFieldNumber = 5,
    kStateFieldNumber = 6,
    kSSRFieldNumber = 7,
    kAddressFieldNumber = 9,
    kCurrTimeFieldNumber = 10,
    kIdFieldNumber = 8,
  };
  // string callNo = 11;
  void clear_callno();
  const std::string& callno() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callno(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callno();
  PROTOBUF_NODISCARD std::string* release_callno();
  void set_allocated_callno(std::string* callno);
  private:
  const std::string& _internal_callno() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callno(const std::string& value);
  std::string* _internal_mutable_callno();
  public:

  // double fX = 1;
  void clear_fx();
  double fx() const;
  void set_fx(double value);
  private:
  double _internal_fx() const;
  void _internal_set_fx(double value);
  public:

  // double fY = 2;
  void clear_fy();
  double fy() const;
  void set_fy(double value);
  private:
  double _internal_fy() const;
  void _internal_set_fy(double value);
  public:

  // double fHead = 3;
  void clear_fhead();
  double fhead() const;
  void set_fhead(double value);
  private:
  double _internal_fhead() const;
  void _internal_set_fhead(double value);
  public:

  // double fHei = 4;
  void clear_fhei();
  double fhei() const;
  void set_fhei(double value);
  private:
  double _internal_fhei() const;
  void _internal_set_fhei(double value);
  public:

  // double fV = 5;
  void clear_fv();
  double fv() const;
  void set_fv(double value);
  private:
  double _internal_fv() const;
  void _internal_set_fv(double value);
  public:

  // int32 state = 6;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // int32 SSR = 7;
  void clear_ssr();
  int32_t ssr() const;
  void set_ssr(int32_t value);
  private:
  int32_t _internal_ssr() const;
  void _internal_set_ssr(int32_t value);
  public:

  // int64 Address = 9;
  void clear_address();
  int64_t address() const;
  void set_address(int64_t value);
  private:
  int64_t _internal_address() const;
  void _internal_set_address(int64_t value);
  public:

  // int64 currTime = 10;
  void clear_currtime();
  int64_t currtime() const;
  void set_currtime(int64_t value);
  private:
  int64_t _internal_currtime() const;
  void _internal_set_currtime(int64_t value);
  public:

  // int32 id = 8;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FusionRetMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callno_;
  double fx_;
  double fy_;
  double fhead_;
  double fhei_;
  double fv_;
  int32_t state_;
  int32_t ssr_;
  int64_t address_;
  int64_t currtime_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fusion_2eproto;
};
// -------------------------------------------------------------------

class FusionUnitMessage_AssMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FusionUnitMessage_AssMapEntry_DoNotUse, 
    int32_t, ::AssTrackMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FusionUnitMessage_AssMapEntry_DoNotUse, 
    int32_t, ::AssTrackMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FusionUnitMessage_AssMapEntry_DoNotUse();
  explicit constexpr FusionUnitMessage_AssMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FusionUnitMessage_AssMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FusionUnitMessage_AssMapEntry_DoNotUse& other);
  static const FusionUnitMessage_AssMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FusionUnitMessage_AssMapEntry_DoNotUse*>(&_FusionUnitMessage_AssMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class FusionUnitMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FusionUnitMessage) */ {
 public:
  inline FusionUnitMessage() : FusionUnitMessage(nullptr) {}
  ~FusionUnitMessage() override;
  explicit constexpr FusionUnitMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionUnitMessage(const FusionUnitMessage& from);
  FusionUnitMessage(FusionUnitMessage&& from) noexcept
    : FusionUnitMessage() {
    *this = ::std::move(from);
  }

  inline FusionUnitMessage& operator=(const FusionUnitMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionUnitMessage& operator=(FusionUnitMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionUnitMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionUnitMessage* internal_default_instance() {
    return reinterpret_cast<const FusionUnitMessage*>(
               &_FusionUnitMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FusionUnitMessage& a, FusionUnitMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionUnitMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionUnitMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionUnitMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionUnitMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionUnitMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FusionUnitMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionUnitMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FusionUnitMessage";
  }
  protected:
  explicit FusionUnitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAssMapFieldNumber = 4,
    kFRetFieldNumber = 5,
    kTimeFieldNumber = 1,
    kFlagFieldNumber = 2,
    kNewTrackNoFieldNumber = 3,
  };
  // map<int32, .AssTrackMessage> assMap = 4;
  int assmap_size() const;
  private:
  int _internal_assmap_size() const;
  public:
  void clear_assmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >&
      _internal_assmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >*
      _internal_mutable_assmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >&
      assmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >*
      mutable_assmap();

  // .FusionRetMessage fRet = 5;
  bool has_fret() const;
  private:
  bool _internal_has_fret() const;
  public:
  void clear_fret();
  const ::FusionRetMessage& fret() const;
  PROTOBUF_NODISCARD ::FusionRetMessage* release_fret();
  ::FusionRetMessage* mutable_fret();
  void set_allocated_fret(::FusionRetMessage* fret);
  private:
  const ::FusionRetMessage& _internal_fret() const;
  ::FusionRetMessage* _internal_mutable_fret();
  public:
  void unsafe_arena_set_allocated_fret(
      ::FusionRetMessage* fret);
  ::FusionRetMessage* unsafe_arena_release_fret();

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int32 flag = 2;
  void clear_flag();
  int32_t flag() const;
  void set_flag(int32_t value);
  private:
  int32_t _internal_flag() const;
  void _internal_set_flag(int32_t value);
  public:

  // int32 newTrackNo = 3;
  void clear_newtrackno();
  int32_t newtrackno() const;
  void set_newtrackno(int32_t value);
  private:
  int32_t _internal_newtrackno() const;
  void _internal_set_newtrackno(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FusionUnitMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FusionUnitMessage_AssMapEntry_DoNotUse,
      int32_t, ::AssTrackMessage,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> assmap_;
  ::FusionRetMessage* fret_;
  int64_t time_;
  int32_t flag_;
  int32_t newtrackno_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fusion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarTrackMessage

// int32 id = 1;
inline void RadarTrackMessage::clear_id() {
  id_ = 0;
}
inline int32_t RadarTrackMessage::_internal_id() const {
  return id_;
}
inline int32_t RadarTrackMessage::id() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.id)
  return _internal_id();
}
inline void RadarTrackMessage::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void RadarTrackMessage::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.id)
}

// int64 Address = 2;
inline void RadarTrackMessage::clear_address() {
  address_ = int64_t{0};
}
inline int64_t RadarTrackMessage::_internal_address() const {
  return address_;
}
inline int64_t RadarTrackMessage::address() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.Address)
  return _internal_address();
}
inline void RadarTrackMessage::_internal_set_address(int64_t value) {
  
  address_ = value;
}
inline void RadarTrackMessage::set_address(int64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.Address)
}

// int64 TrackNo = 3;
inline void RadarTrackMessage::clear_trackno() {
  trackno_ = int64_t{0};
}
inline int64_t RadarTrackMessage::_internal_trackno() const {
  return trackno_;
}
inline int64_t RadarTrackMessage::trackno() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.TrackNo)
  return _internal_trackno();
}
inline void RadarTrackMessage::_internal_set_trackno(int64_t value) {
  
  trackno_ = value;
}
inline void RadarTrackMessage::set_trackno(int64_t value) {
  _internal_set_trackno(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.TrackNo)
}

// int32 SSR = 4;
inline void RadarTrackMessage::clear_ssr() {
  ssr_ = 0;
}
inline int32_t RadarTrackMessage::_internal_ssr() const {
  return ssr_;
}
inline int32_t RadarTrackMessage::ssr() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.SSR)
  return _internal_ssr();
}
inline void RadarTrackMessage::_internal_set_ssr(int32_t value) {
  
  ssr_ = value;
}
inline void RadarTrackMessage::set_ssr(int32_t value) {
  _internal_set_ssr(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.SSR)
}

// string callNo = 5;
inline void RadarTrackMessage::clear_callno() {
  callno_.ClearToEmpty();
}
inline const std::string& RadarTrackMessage::callno() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.callNo)
  return _internal_callno();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RadarTrackMessage::set_callno(ArgT0&& arg0, ArgT... args) {
 
 callno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RadarTrackMessage.callNo)
}
inline std::string* RadarTrackMessage::mutable_callno() {
  std::string* _s = _internal_mutable_callno();
  // @@protoc_insertion_point(field_mutable:RadarTrackMessage.callNo)
  return _s;
}
inline const std::string& RadarTrackMessage::_internal_callno() const {
  return callno_.Get();
}
inline void RadarTrackMessage::_internal_set_callno(const std::string& value) {
  
  callno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RadarTrackMessage::_internal_mutable_callno() {
  
  return callno_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RadarTrackMessage::release_callno() {
  // @@protoc_insertion_point(field_release:RadarTrackMessage.callNo)
  return callno_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RadarTrackMessage::set_allocated_callno(std::string* callno) {
  if (callno != nullptr) {
    
  } else {
    
  }
  callno_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callno,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (callno_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    callno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RadarTrackMessage.callNo)
}

// double fX = 6;
inline void RadarTrackMessage::clear_fx() {
  fx_ = 0;
}
inline double RadarTrackMessage::_internal_fx() const {
  return fx_;
}
inline double RadarTrackMessage::fx() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.fX)
  return _internal_fx();
}
inline void RadarTrackMessage::_internal_set_fx(double value) {
  
  fx_ = value;
}
inline void RadarTrackMessage::set_fx(double value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.fX)
}

// double fY = 7;
inline void RadarTrackMessage::clear_fy() {
  fy_ = 0;
}
inline double RadarTrackMessage::_internal_fy() const {
  return fy_;
}
inline double RadarTrackMessage::fy() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.fY)
  return _internal_fy();
}
inline void RadarTrackMessage::_internal_set_fy(double value) {
  
  fy_ = value;
}
inline void RadarTrackMessage::set_fy(double value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.fY)
}

// bool xyflg = 8;
inline void RadarTrackMessage::clear_xyflg() {
  xyflg_ = false;
}
inline bool RadarTrackMessage::_internal_xyflg() const {
  return xyflg_;
}
inline bool RadarTrackMessage::xyflg() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.xyflg)
  return _internal_xyflg();
}
inline void RadarTrackMessage::_internal_set_xyflg(bool value) {
  
  xyflg_ = value;
}
inline void RadarTrackMessage::set_xyflg(bool value) {
  _internal_set_xyflg(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.xyflg)
}

// double rho = 9;
inline void RadarTrackMessage::clear_rho() {
  rho_ = 0;
}
inline double RadarTrackMessage::_internal_rho() const {
  return rho_;
}
inline double RadarTrackMessage::rho() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.rho)
  return _internal_rho();
}
inline void RadarTrackMessage::_internal_set_rho(double value) {
  
  rho_ = value;
}
inline void RadarTrackMessage::set_rho(double value) {
  _internal_set_rho(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.rho)
}

// double theta = 10;
inline void RadarTrackMessage::clear_theta() {
  theta_ = 0;
}
inline double RadarTrackMessage::_internal_theta() const {
  return theta_;
}
inline double RadarTrackMessage::theta() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.theta)
  return _internal_theta();
}
inline void RadarTrackMessage::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void RadarTrackMessage::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.theta)
}

// bool rtflg = 11;
inline void RadarTrackMessage::clear_rtflg() {
  rtflg_ = false;
}
inline bool RadarTrackMessage::_internal_rtflg() const {
  return rtflg_;
}
inline bool RadarTrackMessage::rtflg() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.rtflg)
  return _internal_rtflg();
}
inline void RadarTrackMessage::_internal_set_rtflg(bool value) {
  
  rtflg_ = value;
}
inline void RadarTrackMessage::set_rtflg(bool value) {
  _internal_set_rtflg(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.rtflg)
}

// int32 Hei = 12;
inline void RadarTrackMessage::clear_hei() {
  hei_ = 0;
}
inline int32_t RadarTrackMessage::_internal_hei() const {
  return hei_;
}
inline int32_t RadarTrackMessage::hei() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.Hei)
  return _internal_hei();
}
inline void RadarTrackMessage::_internal_set_hei(int32_t value) {
  
  hei_ = value;
}
inline void RadarTrackMessage::set_hei(int32_t value) {
  _internal_set_hei(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.Hei)
}

// double Lon = 13;
inline void RadarTrackMessage::clear_lon() {
  lon_ = 0;
}
inline double RadarTrackMessage::_internal_lon() const {
  return lon_;
}
inline double RadarTrackMessage::lon() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.Lon)
  return _internal_lon();
}
inline void RadarTrackMessage::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void RadarTrackMessage::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.Lon)
}

// double Lat = 14;
inline void RadarTrackMessage::clear_lat() {
  lat_ = 0;
}
inline double RadarTrackMessage::_internal_lat() const {
  return lat_;
}
inline double RadarTrackMessage::lat() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.Lat)
  return _internal_lat();
}
inline void RadarTrackMessage::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void RadarTrackMessage::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.Lat)
}

// double vec = 15;
inline void RadarTrackMessage::clear_vec() {
  vec_ = 0;
}
inline double RadarTrackMessage::_internal_vec() const {
  return vec_;
}
inline double RadarTrackMessage::vec() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.vec)
  return _internal_vec();
}
inline void RadarTrackMessage::_internal_set_vec(double value) {
  
  vec_ = value;
}
inline void RadarTrackMessage::set_vec(double value) {
  _internal_set_vec(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.vec)
}

// double cource = 16;
inline void RadarTrackMessage::clear_cource() {
  cource_ = 0;
}
inline double RadarTrackMessage::_internal_cource() const {
  return cource_;
}
inline double RadarTrackMessage::cource() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.cource)
  return _internal_cource();
}
inline void RadarTrackMessage::_internal_set_cource(double value) {
  
  cource_ = value;
}
inline void RadarTrackMessage::set_cource(double value) {
  _internal_set_cource(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.cource)
}

// double vz = 17;
inline void RadarTrackMessage::clear_vz() {
  vz_ = 0;
}
inline double RadarTrackMessage::_internal_vz() const {
  return vz_;
}
inline double RadarTrackMessage::vz() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.vz)
  return _internal_vz();
}
inline void RadarTrackMessage::_internal_set_vz(double value) {
  
  vz_ = value;
}
inline void RadarTrackMessage::set_vz(double value) {
  _internal_set_vz(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.vz)
}

// int64 Time = 18;
inline void RadarTrackMessage::clear_time() {
  time_ = int64_t{0};
}
inline int64_t RadarTrackMessage::_internal_time() const {
  return time_;
}
inline int64_t RadarTrackMessage::time() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.Time)
  return _internal_time();
}
inline void RadarTrackMessage::_internal_set_time(int64_t value) {
  
  time_ = value;
}
inline void RadarTrackMessage::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.Time)
}

// int64 currTime = 19;
inline void RadarTrackMessage::clear_currtime() {
  currtime_ = int64_t{0};
}
inline int64_t RadarTrackMessage::_internal_currtime() const {
  return currtime_;
}
inline int64_t RadarTrackMessage::currtime() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.currTime)
  return _internal_currtime();
}
inline void RadarTrackMessage::_internal_set_currtime(int64_t value) {
  
  currtime_ = value;
}
inline void RadarTrackMessage::set_currtime(int64_t value) {
  _internal_set_currtime(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.currTime)
}

// int32 extraCount = 20;
inline void RadarTrackMessage::clear_extracount() {
  extracount_ = 0;
}
inline int32_t RadarTrackMessage::_internal_extracount() const {
  return extracount_;
}
inline int32_t RadarTrackMessage::extracount() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.extraCount)
  return _internal_extracount();
}
inline void RadarTrackMessage::_internal_set_extracount(int32_t value) {
  
  extracount_ = value;
}
inline void RadarTrackMessage::set_extracount(int32_t value) {
  _internal_set_extracount(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.extraCount)
}

// int64 afterExtraT = 21;
inline void RadarTrackMessage::clear_afterextrat() {
  afterextrat_ = int64_t{0};
}
inline int64_t RadarTrackMessage::_internal_afterextrat() const {
  return afterextrat_;
}
inline int64_t RadarTrackMessage::afterextrat() const {
  // @@protoc_insertion_point(field_get:RadarTrackMessage.afterExtraT)
  return _internal_afterextrat();
}
inline void RadarTrackMessage::_internal_set_afterextrat(int64_t value) {
  
  afterextrat_ = value;
}
inline void RadarTrackMessage::set_afterextrat(int64_t value) {
  _internal_set_afterextrat(value);
  // @@protoc_insertion_point(field_set:RadarTrackMessage.afterExtraT)
}

// -------------------------------------------------------------------

// AssTrackMessage

// repeated .RadarTrackMessage unitTrackVec = 1;
inline int AssTrackMessage::_internal_unittrackvec_size() const {
  return unittrackvec_.size();
}
inline int AssTrackMessage::unittrackvec_size() const {
  return _internal_unittrackvec_size();
}
inline void AssTrackMessage::clear_unittrackvec() {
  unittrackvec_.Clear();
}
inline ::RadarTrackMessage* AssTrackMessage::mutable_unittrackvec(int index) {
  // @@protoc_insertion_point(field_mutable:AssTrackMessage.unitTrackVec)
  return unittrackvec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RadarTrackMessage >*
AssTrackMessage::mutable_unittrackvec() {
  // @@protoc_insertion_point(field_mutable_list:AssTrackMessage.unitTrackVec)
  return &unittrackvec_;
}
inline const ::RadarTrackMessage& AssTrackMessage::_internal_unittrackvec(int index) const {
  return unittrackvec_.Get(index);
}
inline const ::RadarTrackMessage& AssTrackMessage::unittrackvec(int index) const {
  // @@protoc_insertion_point(field_get:AssTrackMessage.unitTrackVec)
  return _internal_unittrackvec(index);
}
inline ::RadarTrackMessage* AssTrackMessage::_internal_add_unittrackvec() {
  return unittrackvec_.Add();
}
inline ::RadarTrackMessage* AssTrackMessage::add_unittrackvec() {
  ::RadarTrackMessage* _add = _internal_add_unittrackvec();
  // @@protoc_insertion_point(field_add:AssTrackMessage.unitTrackVec)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RadarTrackMessage >&
AssTrackMessage::unittrackvec() const {
  // @@protoc_insertion_point(field_list:AssTrackMessage.unitTrackVec)
  return unittrackvec_;
}

// double weight = 2;
inline void AssTrackMessage::clear_weight() {
  weight_ = 0;
}
inline double AssTrackMessage::_internal_weight() const {
  return weight_;
}
inline double AssTrackMessage::weight() const {
  // @@protoc_insertion_point(field_get:AssTrackMessage.weight)
  return _internal_weight();
}
inline void AssTrackMessage::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void AssTrackMessage::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:AssTrackMessage.weight)
}

// int32 unitTrackTermCount = 3;
inline void AssTrackMessage::clear_unittracktermcount() {
  unittracktermcount_ = 0;
}
inline int32_t AssTrackMessage::_internal_unittracktermcount() const {
  return unittracktermcount_;
}
inline int32_t AssTrackMessage::unittracktermcount() const {
  // @@protoc_insertion_point(field_get:AssTrackMessage.unitTrackTermCount)
  return _internal_unittracktermcount();
}
inline void AssTrackMessage::_internal_set_unittracktermcount(int32_t value) {
  
  unittracktermcount_ = value;
}
inline void AssTrackMessage::set_unittracktermcount(int32_t value) {
  _internal_set_unittracktermcount(value);
  // @@protoc_insertion_point(field_set:AssTrackMessage.unitTrackTermCount)
}

// -------------------------------------------------------------------

// FusionRetMessage

// double fX = 1;
inline void FusionRetMessage::clear_fx() {
  fx_ = 0;
}
inline double FusionRetMessage::_internal_fx() const {
  return fx_;
}
inline double FusionRetMessage::fx() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.fX)
  return _internal_fx();
}
inline void FusionRetMessage::_internal_set_fx(double value) {
  
  fx_ = value;
}
inline void FusionRetMessage::set_fx(double value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:FusionRetMessage.fX)
}

// double fY = 2;
inline void FusionRetMessage::clear_fy() {
  fy_ = 0;
}
inline double FusionRetMessage::_internal_fy() const {
  return fy_;
}
inline double FusionRetMessage::fy() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.fY)
  return _internal_fy();
}
inline void FusionRetMessage::_internal_set_fy(double value) {
  
  fy_ = value;
}
inline void FusionRetMessage::set_fy(double value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:FusionRetMessage.fY)
}

// double fHead = 3;
inline void FusionRetMessage::clear_fhead() {
  fhead_ = 0;
}
inline double FusionRetMessage::_internal_fhead() const {
  return fhead_;
}
inline double FusionRetMessage::fhead() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.fHead)
  return _internal_fhead();
}
inline void FusionRetMessage::_internal_set_fhead(double value) {
  
  fhead_ = value;
}
inline void FusionRetMessage::set_fhead(double value) {
  _internal_set_fhead(value);
  // @@protoc_insertion_point(field_set:FusionRetMessage.fHead)
}

// double fHei = 4;
inline void FusionRetMessage::clear_fhei() {
  fhei_ = 0;
}
inline double FusionRetMessage::_internal_fhei() const {
  return fhei_;
}
inline double FusionRetMessage::fhei() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.fHei)
  return _internal_fhei();
}
inline void FusionRetMessage::_internal_set_fhei(double value) {
  
  fhei_ = value;
}
inline void FusionRetMessage::set_fhei(double value) {
  _internal_set_fhei(value);
  // @@protoc_insertion_point(field_set:FusionRetMessage.fHei)
}

// double fV = 5;
inline void FusionRetMessage::clear_fv() {
  fv_ = 0;
}
inline double FusionRetMessage::_internal_fv() const {
  return fv_;
}
inline double FusionRetMessage::fv() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.fV)
  return _internal_fv();
}
inline void FusionRetMessage::_internal_set_fv(double value) {
  
  fv_ = value;
}
inline void FusionRetMessage::set_fv(double value) {
  _internal_set_fv(value);
  // @@protoc_insertion_point(field_set:FusionRetMessage.fV)
}

// int32 state = 6;
inline void FusionRetMessage::clear_state() {
  state_ = 0;
}
inline int32_t FusionRetMessage::_internal_state() const {
  return state_;
}
inline int32_t FusionRetMessage::state() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.state)
  return _internal_state();
}
inline void FusionRetMessage::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void FusionRetMessage::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:FusionRetMessage.state)
}

// int32 SSR = 7;
inline void FusionRetMessage::clear_ssr() {
  ssr_ = 0;
}
inline int32_t FusionRetMessage::_internal_ssr() const {
  return ssr_;
}
inline int32_t FusionRetMessage::ssr() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.SSR)
  return _internal_ssr();
}
inline void FusionRetMessage::_internal_set_ssr(int32_t value) {
  
  ssr_ = value;
}
inline void FusionRetMessage::set_ssr(int32_t value) {
  _internal_set_ssr(value);
  // @@protoc_insertion_point(field_set:FusionRetMessage.SSR)
}

// int32 id = 8;
inline void FusionRetMessage::clear_id() {
  id_ = 0;
}
inline int32_t FusionRetMessage::_internal_id() const {
  return id_;
}
inline int32_t FusionRetMessage::id() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.id)
  return _internal_id();
}
inline void FusionRetMessage::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void FusionRetMessage::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:FusionRetMessage.id)
}

// int64 Address = 9;
inline void FusionRetMessage::clear_address() {
  address_ = int64_t{0};
}
inline int64_t FusionRetMessage::_internal_address() const {
  return address_;
}
inline int64_t FusionRetMessage::address() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.Address)
  return _internal_address();
}
inline void FusionRetMessage::_internal_set_address(int64_t value) {
  
  address_ = value;
}
inline void FusionRetMessage::set_address(int64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:FusionRetMessage.Address)
}

// int64 currTime = 10;
inline void FusionRetMessage::clear_currtime() {
  currtime_ = int64_t{0};
}
inline int64_t FusionRetMessage::_internal_currtime() const {
  return currtime_;
}
inline int64_t FusionRetMessage::currtime() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.currTime)
  return _internal_currtime();
}
inline void FusionRetMessage::_internal_set_currtime(int64_t value) {
  
  currtime_ = value;
}
inline void FusionRetMessage::set_currtime(int64_t value) {
  _internal_set_currtime(value);
  // @@protoc_insertion_point(field_set:FusionRetMessage.currTime)
}

// string callNo = 11;
inline void FusionRetMessage::clear_callno() {
  callno_.ClearToEmpty();
}
inline const std::string& FusionRetMessage::callno() const {
  // @@protoc_insertion_point(field_get:FusionRetMessage.callNo)
  return _internal_callno();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FusionRetMessage::set_callno(ArgT0&& arg0, ArgT... args) {
 
 callno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FusionRetMessage.callNo)
}
inline std::string* FusionRetMessage::mutable_callno() {
  std::string* _s = _internal_mutable_callno();
  // @@protoc_insertion_point(field_mutable:FusionRetMessage.callNo)
  return _s;
}
inline const std::string& FusionRetMessage::_internal_callno() const {
  return callno_.Get();
}
inline void FusionRetMessage::_internal_set_callno(const std::string& value) {
  
  callno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FusionRetMessage::_internal_mutable_callno() {
  
  return callno_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FusionRetMessage::release_callno() {
  // @@protoc_insertion_point(field_release:FusionRetMessage.callNo)
  return callno_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FusionRetMessage::set_allocated_callno(std::string* callno) {
  if (callno != nullptr) {
    
  } else {
    
  }
  callno_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callno,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (callno_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    callno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FusionRetMessage.callNo)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FusionUnitMessage

// int64 time = 1;
inline void FusionUnitMessage::clear_time() {
  time_ = int64_t{0};
}
inline int64_t FusionUnitMessage::_internal_time() const {
  return time_;
}
inline int64_t FusionUnitMessage::time() const {
  // @@protoc_insertion_point(field_get:FusionUnitMessage.time)
  return _internal_time();
}
inline void FusionUnitMessage::_internal_set_time(int64_t value) {
  
  time_ = value;
}
inline void FusionUnitMessage::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:FusionUnitMessage.time)
}

// int32 flag = 2;
inline void FusionUnitMessage::clear_flag() {
  flag_ = 0;
}
inline int32_t FusionUnitMessage::_internal_flag() const {
  return flag_;
}
inline int32_t FusionUnitMessage::flag() const {
  // @@protoc_insertion_point(field_get:FusionUnitMessage.flag)
  return _internal_flag();
}
inline void FusionUnitMessage::_internal_set_flag(int32_t value) {
  
  flag_ = value;
}
inline void FusionUnitMessage::set_flag(int32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:FusionUnitMessage.flag)
}

// int32 newTrackNo = 3;
inline void FusionUnitMessage::clear_newtrackno() {
  newtrackno_ = 0;
}
inline int32_t FusionUnitMessage::_internal_newtrackno() const {
  return newtrackno_;
}
inline int32_t FusionUnitMessage::newtrackno() const {
  // @@protoc_insertion_point(field_get:FusionUnitMessage.newTrackNo)
  return _internal_newtrackno();
}
inline void FusionUnitMessage::_internal_set_newtrackno(int32_t value) {
  
  newtrackno_ = value;
}
inline void FusionUnitMessage::set_newtrackno(int32_t value) {
  _internal_set_newtrackno(value);
  // @@protoc_insertion_point(field_set:FusionUnitMessage.newTrackNo)
}

// map<int32, .AssTrackMessage> assMap = 4;
inline int FusionUnitMessage::_internal_assmap_size() const {
  return assmap_.size();
}
inline int FusionUnitMessage::assmap_size() const {
  return _internal_assmap_size();
}
inline void FusionUnitMessage::clear_assmap() {
  assmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >&
FusionUnitMessage::_internal_assmap() const {
  return assmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >&
FusionUnitMessage::assmap() const {
  // @@protoc_insertion_point(field_map:FusionUnitMessage.assMap)
  return _internal_assmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >*
FusionUnitMessage::_internal_mutable_assmap() {
  return assmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >*
FusionUnitMessage::mutable_assmap() {
  // @@protoc_insertion_point(field_mutable_map:FusionUnitMessage.assMap)
  return _internal_mutable_assmap();
}

// .FusionRetMessage fRet = 5;
inline bool FusionUnitMessage::_internal_has_fret() const {
  return this != internal_default_instance() && fret_ != nullptr;
}
inline bool FusionUnitMessage::has_fret() const {
  return _internal_has_fret();
}
inline void FusionUnitMessage::clear_fret() {
  if (GetArenaForAllocation() == nullptr && fret_ != nullptr) {
    delete fret_;
  }
  fret_ = nullptr;
}
inline const ::FusionRetMessage& FusionUnitMessage::_internal_fret() const {
  const ::FusionRetMessage* p = fret_;
  return p != nullptr ? *p : reinterpret_cast<const ::FusionRetMessage&>(
      ::_FusionRetMessage_default_instance_);
}
inline const ::FusionRetMessage& FusionUnitMessage::fret() const {
  // @@protoc_insertion_point(field_get:FusionUnitMessage.fRet)
  return _internal_fret();
}
inline void FusionUnitMessage::unsafe_arena_set_allocated_fret(
    ::FusionRetMessage* fret) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fret_);
  }
  fret_ = fret;
  if (fret) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FusionUnitMessage.fRet)
}
inline ::FusionRetMessage* FusionUnitMessage::release_fret() {
  
  ::FusionRetMessage* temp = fret_;
  fret_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FusionRetMessage* FusionUnitMessage::unsafe_arena_release_fret() {
  // @@protoc_insertion_point(field_release:FusionUnitMessage.fRet)
  
  ::FusionRetMessage* temp = fret_;
  fret_ = nullptr;
  return temp;
}
inline ::FusionRetMessage* FusionUnitMessage::_internal_mutable_fret() {
  
  if (fret_ == nullptr) {
    auto* p = CreateMaybeMessage<::FusionRetMessage>(GetArenaForAllocation());
    fret_ = p;
  }
  return fret_;
}
inline ::FusionRetMessage* FusionUnitMessage::mutable_fret() {
  ::FusionRetMessage* _msg = _internal_mutable_fret();
  // @@protoc_insertion_point(field_mutable:FusionUnitMessage.fRet)
  return _msg;
}
inline void FusionUnitMessage::set_allocated_fret(::FusionRetMessage* fret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fret_;
  }
  if (fret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FusionRetMessage>::GetOwningArena(fret);
    if (message_arena != submessage_arena) {
      fret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fret, submessage_arena);
    }
    
  } else {
    
  }
  fret_ = fret;
  // @@protoc_insertion_point(field_set_allocated:FusionUnitMessage.fRet)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fusion_2eproto
