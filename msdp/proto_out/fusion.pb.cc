// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion.proto

#include "fusion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr RadarTrackMessage::RadarTrackMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callno_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(int64_t{0})
  , id_(0)
  , ssr_(0)
  , trackno_(int64_t{0})
  , fx_(0)
  , fy_(0)
  , rho_(0)
  , theta_(0)
  , xyflg_(false)
  , rtflg_(false)
  , hei_(0)
  , lon_(0)
  , lat_(0)
  , vec_(0)
  , cource_(0)
  , vz_(0)
  , time_(int64_t{0})
  , currtime_(int64_t{0})
  , afterextrat_(int64_t{0})
  , extracount_(0){}
struct RadarTrackMessageDefaultTypeInternal {
  constexpr RadarTrackMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarTrackMessageDefaultTypeInternal() {}
  union {
    RadarTrackMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarTrackMessageDefaultTypeInternal _RadarTrackMessage_default_instance_;
constexpr AssTrackMessage::AssTrackMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unittrackvec_()
  , weight_(0)
  , unittracktermcount_(0){}
struct AssTrackMessageDefaultTypeInternal {
  constexpr AssTrackMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssTrackMessageDefaultTypeInternal() {}
  union {
    AssTrackMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssTrackMessageDefaultTypeInternal _AssTrackMessage_default_instance_;
constexpr FusionRetMessage::FusionRetMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callno_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fx_(0)
  , fy_(0)
  , fhead_(0)
  , fhei_(0)
  , fv_(0)
  , state_(0)
  , ssr_(0)
  , address_(int64_t{0})
  , currtime_(int64_t{0})
  , id_(0){}
struct FusionRetMessageDefaultTypeInternal {
  constexpr FusionRetMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FusionRetMessageDefaultTypeInternal() {}
  union {
    FusionRetMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FusionRetMessageDefaultTypeInternal _FusionRetMessage_default_instance_;
constexpr FusionUnitMessage_AssMapEntry_DoNotUse::FusionUnitMessage_AssMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FusionUnitMessage_AssMapEntry_DoNotUseDefaultTypeInternal {
  constexpr FusionUnitMessage_AssMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FusionUnitMessage_AssMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FusionUnitMessage_AssMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FusionUnitMessage_AssMapEntry_DoNotUseDefaultTypeInternal _FusionUnitMessage_AssMapEntry_DoNotUse_default_instance_;
constexpr FusionUnitMessage::FusionUnitMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assmap_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , fret_(nullptr)
  , time_(int64_t{0})
  , flag_(0)
  , newtrackno_(0){}
struct FusionUnitMessageDefaultTypeInternal {
  constexpr FusionUnitMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FusionUnitMessageDefaultTypeInternal() {}
  union {
    FusionUnitMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FusionUnitMessageDefaultTypeInternal _FusionUnitMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fusion_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fusion_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fusion_2eproto = nullptr;

const uint32_t TableStruct_fusion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, id_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, address_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, trackno_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, ssr_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, callno_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, fx_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, fy_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, xyflg_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, rho_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, theta_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, rtflg_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, hei_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, lon_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, lat_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, vec_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, cource_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, vz_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, time_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, currtime_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, extracount_),
  PROTOBUF_FIELD_OFFSET(::RadarTrackMessage, afterextrat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AssTrackMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AssTrackMessage, unittrackvec_),
  PROTOBUF_FIELD_OFFSET(::AssTrackMessage, weight_),
  PROTOBUF_FIELD_OFFSET(::AssTrackMessage, unittracktermcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, fx_),
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, fy_),
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, fhead_),
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, fhei_),
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, fv_),
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, state_),
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, ssr_),
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, id_),
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, address_),
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, currtime_),
  PROTOBUF_FIELD_OFFSET(::FusionRetMessage, callno_),
  PROTOBUF_FIELD_OFFSET(::FusionUnitMessage_AssMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FusionUnitMessage_AssMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FusionUnitMessage_AssMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FusionUnitMessage_AssMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FusionUnitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FusionUnitMessage, time_),
  PROTOBUF_FIELD_OFFSET(::FusionUnitMessage, flag_),
  PROTOBUF_FIELD_OFFSET(::FusionUnitMessage, newtrackno_),
  PROTOBUF_FIELD_OFFSET(::FusionUnitMessage, assmap_),
  PROTOBUF_FIELD_OFFSET(::FusionUnitMessage, fret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RadarTrackMessage)},
  { 27, -1, -1, sizeof(::AssTrackMessage)},
  { 36, -1, -1, sizeof(::FusionRetMessage)},
  { 53, 61, -1, sizeof(::FusionUnitMessage_AssMapEntry_DoNotUse)},
  { 63, -1, -1, sizeof(::FusionUnitMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RadarTrackMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AssTrackMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FusionRetMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FusionUnitMessage_AssMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FusionUnitMessage_default_instance_),
};

const char descriptor_table_protodef_fusion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014fusion.proto\"\311\002\n\021RadarTrackMessage\022\n\n\002"
  "id\030\001 \001(\005\022\017\n\007Address\030\002 \001(\003\022\017\n\007TrackNo\030\003 \001"
  "(\003\022\013\n\003SSR\030\004 \001(\005\022\016\n\006callNo\030\005 \001(\t\022\n\n\002fX\030\006 "
  "\001(\001\022\n\n\002fY\030\007 \001(\001\022\r\n\005xyflg\030\010 \001(\010\022\013\n\003rho\030\t "
  "\001(\001\022\r\n\005theta\030\n \001(\001\022\r\n\005rtflg\030\013 \001(\010\022\013\n\003Hei"
  "\030\014 \001(\005\022\013\n\003Lon\030\r \001(\001\022\013\n\003Lat\030\016 \001(\001\022\013\n\003vec\030"
  "\017 \001(\001\022\016\n\006cource\030\020 \001(\001\022\n\n\002vz\030\021 \001(\001\022\014\n\004Tim"
  "e\030\022 \001(\003\022\020\n\010currTime\030\023 \001(\003\022\022\n\nextraCount\030"
  "\024 \001(\005\022\023\n\013afterExtraT\030\025 \001(\003\"g\n\017AssTrackMe"
  "ssage\022(\n\014unitTrackVec\030\001 \003(\0132\022.RadarTrack"
  "Message\022\016\n\006weight\030\002 \001(\001\022\032\n\022unitTrackTerm"
  "Count\030\003 \001(\005\"\256\001\n\020FusionRetMessage\022\n\n\002fX\030\001"
  " \001(\001\022\n\n\002fY\030\002 \001(\001\022\r\n\005fHead\030\003 \001(\001\022\014\n\004fHei\030"
  "\004 \001(\001\022\n\n\002fV\030\005 \001(\001\022\r\n\005state\030\006 \001(\005\022\013\n\003SSR\030"
  "\007 \001(\005\022\n\n\002id\030\010 \001(\005\022\017\n\007Address\030\t \001(\003\022\020\n\010cu"
  "rrTime\030\n \001(\003\022\016\n\006callNo\030\013 \001(\t\"\325\001\n\021FusionU"
  "nitMessage\022\014\n\004time\030\001 \001(\003\022\014\n\004flag\030\002 \001(\005\022\022"
  "\n\nnewTrackNo\030\003 \001(\005\022.\n\006assMap\030\004 \003(\0132\036.Fus"
  "ionUnitMessage.AssMapEntry\022\037\n\004fRet\030\005 \001(\013"
  "2\021.FusionRetMessage\032\?\n\013AssMapEntry\022\013\n\003ke"
  "y\030\001 \001(\005\022\037\n\005value\030\002 \001(\0132\020.AssTrackMessage"
  ":\0028\001B\003\200\001\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fusion_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fusion_2eproto = {
  false, false, 857, descriptor_table_protodef_fusion_2eproto, "fusion.proto", 
  &descriptor_table_fusion_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_fusion_2eproto::offsets,
  file_level_metadata_fusion_2eproto, file_level_enum_descriptors_fusion_2eproto, file_level_service_descriptors_fusion_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_fusion_2eproto_getter() {
  return &descriptor_table_fusion_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_fusion_2eproto(&descriptor_table_fusion_2eproto);

// ===================================================================

class RadarTrackMessage::_Internal {
 public:
};

RadarTrackMessage::RadarTrackMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RadarTrackMessage)
}
RadarTrackMessage::RadarTrackMessage(const RadarTrackMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  callno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    callno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_callno().empty()) {
    callno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callno(), 
      GetArenaForAllocation());
  }
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&extracount_) -
    reinterpret_cast<char*>(&address_)) + sizeof(extracount_));
  // @@protoc_insertion_point(copy_constructor:RadarTrackMessage)
}

inline void RadarTrackMessage::SharedCtor() {
callno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  callno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extracount_) -
    reinterpret_cast<char*>(&address_)) + sizeof(extracount_));
}

RadarTrackMessage::~RadarTrackMessage() {
  // @@protoc_insertion_point(destructor:RadarTrackMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RadarTrackMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  callno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RadarTrackMessage::ArenaDtor(void* object) {
  RadarTrackMessage* _this = reinterpret_cast< RadarTrackMessage* >(object);
  (void)_this;
}
void RadarTrackMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarTrackMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarTrackMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RadarTrackMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callno_.ClearToEmpty();
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extracount_) -
      reinterpret_cast<char*>(&address_)) + sizeof(extracount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarTrackMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TrackNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          trackno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SSR = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ssr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string callNo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_callno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RadarTrackMessage.callNo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double fX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool xyflg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          xyflg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double rho = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          rho_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double theta = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool rtflg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          rtflg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Hei = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          hei_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double Lon = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double Lat = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double vec = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          vec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cource = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          cource_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double vz = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          vz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 Time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 currTime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          currtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 extraCount = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          extracount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 afterExtraT = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          afterextrat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarTrackMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RadarTrackMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int64 Address = 2;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_address(), target);
  }

  // int64 TrackNo = 3;
  if (this->_internal_trackno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_trackno(), target);
  }

  // int32 SSR = 4;
  if (this->_internal_ssr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ssr(), target);
  }

  // string callNo = 5;
  if (!this->_internal_callno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callno().data(), static_cast<int>(this->_internal_callno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RadarTrackMessage.callNo");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_callno(), target);
  }

  // double fX = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fx = this->_internal_fx();
  uint64_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_fx(), target);
  }

  // double fY = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fy = this->_internal_fy();
  uint64_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_fy(), target);
  }

  // bool xyflg = 8;
  if (this->_internal_xyflg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_xyflg(), target);
  }

  // double rho = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rho = this->_internal_rho();
  uint64_t raw_rho;
  memcpy(&raw_rho, &tmp_rho, sizeof(tmp_rho));
  if (raw_rho != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_rho(), target);
  }

  // double theta = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_theta(), target);
  }

  // bool rtflg = 11;
  if (this->_internal_rtflg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_rtflg(), target);
  }

  // int32 Hei = 12;
  if (this->_internal_hei() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_hei(), target);
  }

  // double Lon = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon = this->_internal_lon();
  uint64_t raw_lon;
  memcpy(&raw_lon, &tmp_lon, sizeof(tmp_lon));
  if (raw_lon != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_lon(), target);
  }

  // double Lat = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_lat(), target);
  }

  // double vec = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vec = this->_internal_vec();
  uint64_t raw_vec;
  memcpy(&raw_vec, &tmp_vec, sizeof(tmp_vec));
  if (raw_vec != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_vec(), target);
  }

  // double cource = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cource = this->_internal_cource();
  uint64_t raw_cource;
  memcpy(&raw_cource, &tmp_cource, sizeof(tmp_cource));
  if (raw_cource != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_cource(), target);
  }

  // double vz = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vz = this->_internal_vz();
  uint64_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_vz(), target);
  }

  // int64 Time = 18;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_time(), target);
  }

  // int64 currTime = 19;
  if (this->_internal_currtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_currtime(), target);
  }

  // int32 extraCount = 20;
  if (this->_internal_extracount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_extracount(), target);
  }

  // int64 afterExtraT = 21;
  if (this->_internal_afterextrat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_afterextrat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RadarTrackMessage)
  return target;
}

size_t RadarTrackMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RadarTrackMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string callNo = 5;
  if (!this->_internal_callno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callno());
  }

  // int64 Address = 2;
  if (this->_internal_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_address());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 SSR = 4;
  if (this->_internal_ssr() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ssr());
  }

  // int64 TrackNo = 3;
  if (this->_internal_trackno() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_trackno());
  }

  // double fX = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fx = this->_internal_fx();
  uint64_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    total_size += 1 + 8;
  }

  // double fY = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fy = this->_internal_fy();
  uint64_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    total_size += 1 + 8;
  }

  // double rho = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rho = this->_internal_rho();
  uint64_t raw_rho;
  memcpy(&raw_rho, &tmp_rho, sizeof(tmp_rho));
  if (raw_rho != 0) {
    total_size += 1 + 8;
  }

  // double theta = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    total_size += 1 + 8;
  }

  // bool xyflg = 8;
  if (this->_internal_xyflg() != 0) {
    total_size += 1 + 1;
  }

  // bool rtflg = 11;
  if (this->_internal_rtflg() != 0) {
    total_size += 1 + 1;
  }

  // int32 Hei = 12;
  if (this->_internal_hei() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hei());
  }

  // double Lon = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon = this->_internal_lon();
  uint64_t raw_lon;
  memcpy(&raw_lon, &tmp_lon, sizeof(tmp_lon));
  if (raw_lon != 0) {
    total_size += 1 + 8;
  }

  // double Lat = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    total_size += 1 + 8;
  }

  // double vec = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vec = this->_internal_vec();
  uint64_t raw_vec;
  memcpy(&raw_vec, &tmp_vec, sizeof(tmp_vec));
  if (raw_vec != 0) {
    total_size += 1 + 8;
  }

  // double cource = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cource = this->_internal_cource();
  uint64_t raw_cource;
  memcpy(&raw_cource, &tmp_cource, sizeof(tmp_cource));
  if (raw_cource != 0) {
    total_size += 2 + 8;
  }

  // double vz = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vz = this->_internal_vz();
  uint64_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    total_size += 2 + 8;
  }

  // int64 Time = 18;
  if (this->_internal_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 currTime = 19;
  if (this->_internal_currtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_currtime());
  }

  // int64 afterExtraT = 21;
  if (this->_internal_afterextrat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_afterextrat());
  }

  // int32 extraCount = 20;
  if (this->_internal_extracount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extracount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarTrackMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarTrackMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarTrackMessage::GetClassData() const { return &_class_data_; }

void RadarTrackMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarTrackMessage *>(to)->MergeFrom(
      static_cast<const RadarTrackMessage &>(from));
}


void RadarTrackMessage::MergeFrom(const RadarTrackMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RadarTrackMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_callno().empty()) {
    _internal_set_callno(from._internal_callno());
  }
  if (from._internal_address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_ssr() != 0) {
    _internal_set_ssr(from._internal_ssr());
  }
  if (from._internal_trackno() != 0) {
    _internal_set_trackno(from._internal_trackno());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fx = from._internal_fx();
  uint64_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    _internal_set_fx(from._internal_fx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fy = from._internal_fy();
  uint64_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    _internal_set_fy(from._internal_fy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rho = from._internal_rho();
  uint64_t raw_rho;
  memcpy(&raw_rho, &tmp_rho, sizeof(tmp_rho));
  if (raw_rho != 0) {
    _internal_set_rho(from._internal_rho());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = from._internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    _internal_set_theta(from._internal_theta());
  }
  if (from._internal_xyflg() != 0) {
    _internal_set_xyflg(from._internal_xyflg());
  }
  if (from._internal_rtflg() != 0) {
    _internal_set_rtflg(from._internal_rtflg());
  }
  if (from._internal_hei() != 0) {
    _internal_set_hei(from._internal_hei());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon = from._internal_lon();
  uint64_t raw_lon;
  memcpy(&raw_lon, &tmp_lon, sizeof(tmp_lon));
  if (raw_lon != 0) {
    _internal_set_lon(from._internal_lon());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = from._internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    _internal_set_lat(from._internal_lat());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vec = from._internal_vec();
  uint64_t raw_vec;
  memcpy(&raw_vec, &tmp_vec, sizeof(tmp_vec));
  if (raw_vec != 0) {
    _internal_set_vec(from._internal_vec());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cource = from._internal_cource();
  uint64_t raw_cource;
  memcpy(&raw_cource, &tmp_cource, sizeof(tmp_cource));
  if (raw_cource != 0) {
    _internal_set_cource(from._internal_cource());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vz = from._internal_vz();
  uint64_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    _internal_set_vz(from._internal_vz());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_currtime() != 0) {
    _internal_set_currtime(from._internal_currtime());
  }
  if (from._internal_afterextrat() != 0) {
    _internal_set_afterextrat(from._internal_afterextrat());
  }
  if (from._internal_extracount() != 0) {
    _internal_set_extracount(from._internal_extracount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarTrackMessage::CopyFrom(const RadarTrackMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RadarTrackMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarTrackMessage::IsInitialized() const {
  return true;
}

void RadarTrackMessage::InternalSwap(RadarTrackMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &callno_, lhs_arena,
      &other->callno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarTrackMessage, extracount_)
      + sizeof(RadarTrackMessage::extracount_)
      - PROTOBUF_FIELD_OFFSET(RadarTrackMessage, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarTrackMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fusion_2eproto_getter, &descriptor_table_fusion_2eproto_once,
      file_level_metadata_fusion_2eproto[0]);
}

// ===================================================================

class AssTrackMessage::_Internal {
 public:
};

AssTrackMessage::AssTrackMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unittrackvec_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AssTrackMessage)
}
AssTrackMessage::AssTrackMessage(const AssTrackMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unittrackvec_(from.unittrackvec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&unittracktermcount_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(unittracktermcount_));
  // @@protoc_insertion_point(copy_constructor:AssTrackMessage)
}

inline void AssTrackMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unittracktermcount_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(unittracktermcount_));
}

AssTrackMessage::~AssTrackMessage() {
  // @@protoc_insertion_point(destructor:AssTrackMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssTrackMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AssTrackMessage::ArenaDtor(void* object) {
  AssTrackMessage* _this = reinterpret_cast< AssTrackMessage* >(object);
  (void)_this;
}
void AssTrackMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssTrackMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssTrackMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AssTrackMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unittrackvec_.Clear();
  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unittracktermcount_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(unittracktermcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssTrackMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .RadarTrackMessage unitTrackVec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unittrackvec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 unitTrackTermCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          unittracktermcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssTrackMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AssTrackMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RadarTrackMessage unitTrackVec = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unittrackvec_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_unittrackvec(i), target, stream);
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight(), target);
  }

  // int32 unitTrackTermCount = 3;
  if (this->_internal_unittracktermcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_unittracktermcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AssTrackMessage)
  return target;
}

size_t AssTrackMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AssTrackMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RadarTrackMessage unitTrackVec = 1;
  total_size += 1UL * this->_internal_unittrackvec_size();
  for (const auto& msg : this->unittrackvec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  // int32 unitTrackTermCount = 3;
  if (this->_internal_unittracktermcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_unittracktermcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssTrackMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssTrackMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssTrackMessage::GetClassData() const { return &_class_data_; }

void AssTrackMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssTrackMessage *>(to)->MergeFrom(
      static_cast<const AssTrackMessage &>(from));
}


void AssTrackMessage::MergeFrom(const AssTrackMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AssTrackMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  unittrackvec_.MergeFrom(from.unittrackvec_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_unittracktermcount() != 0) {
    _internal_set_unittracktermcount(from._internal_unittracktermcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssTrackMessage::CopyFrom(const AssTrackMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AssTrackMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssTrackMessage::IsInitialized() const {
  return true;
}

void AssTrackMessage::InternalSwap(AssTrackMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unittrackvec_.InternalSwap(&other->unittrackvec_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssTrackMessage, unittracktermcount_)
      + sizeof(AssTrackMessage::unittracktermcount_)
      - PROTOBUF_FIELD_OFFSET(AssTrackMessage, weight_)>(
          reinterpret_cast<char*>(&weight_),
          reinterpret_cast<char*>(&other->weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssTrackMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fusion_2eproto_getter, &descriptor_table_fusion_2eproto_once,
      file_level_metadata_fusion_2eproto[1]);
}

// ===================================================================

class FusionRetMessage::_Internal {
 public:
};

FusionRetMessage::FusionRetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FusionRetMessage)
}
FusionRetMessage::FusionRetMessage(const FusionRetMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  callno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    callno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_callno().empty()) {
    callno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callno(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:FusionRetMessage)
}

inline void FusionRetMessage::SharedCtor() {
callno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  callno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(id_));
}

FusionRetMessage::~FusionRetMessage() {
  // @@protoc_insertion_point(destructor:FusionRetMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FusionRetMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  callno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FusionRetMessage::ArenaDtor(void* object) {
  FusionRetMessage* _this = reinterpret_cast< FusionRetMessage* >(object);
  (void)_this;
}
void FusionRetMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FusionRetMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FusionRetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:FusionRetMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callno_.ClearToEmpty();
  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FusionRetMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double fX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fHead = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          fhead_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fHei = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          fhei_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fV = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          fv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SSR = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ssr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 currTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          currtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string callNo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_callno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FusionRetMessage.callNo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FusionRetMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FusionRetMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double fX = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fx = this->_internal_fx();
  uint64_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_fx(), target);
  }

  // double fY = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fy = this->_internal_fy();
  uint64_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_fy(), target);
  }

  // double fHead = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fhead = this->_internal_fhead();
  uint64_t raw_fhead;
  memcpy(&raw_fhead, &tmp_fhead, sizeof(tmp_fhead));
  if (raw_fhead != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fhead(), target);
  }

  // double fHei = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fhei = this->_internal_fhei();
  uint64_t raw_fhei;
  memcpy(&raw_fhei, &tmp_fhei, sizeof(tmp_fhei));
  if (raw_fhei != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fhei(), target);
  }

  // double fV = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fv = this->_internal_fv();
  uint64_t raw_fv;
  memcpy(&raw_fv, &tmp_fv, sizeof(tmp_fv));
  if (raw_fv != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_fv(), target);
  }

  // int32 state = 6;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_state(), target);
  }

  // int32 SSR = 7;
  if (this->_internal_ssr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ssr(), target);
  }

  // int32 id = 8;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_id(), target);
  }

  // int64 Address = 9;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_address(), target);
  }

  // int64 currTime = 10;
  if (this->_internal_currtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_currtime(), target);
  }

  // string callNo = 11;
  if (!this->_internal_callno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callno().data(), static_cast<int>(this->_internal_callno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FusionRetMessage.callNo");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_callno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FusionRetMessage)
  return target;
}

size_t FusionRetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FusionRetMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string callNo = 11;
  if (!this->_internal_callno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callno());
  }

  // double fX = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fx = this->_internal_fx();
  uint64_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    total_size += 1 + 8;
  }

  // double fY = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fy = this->_internal_fy();
  uint64_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    total_size += 1 + 8;
  }

  // double fHead = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fhead = this->_internal_fhead();
  uint64_t raw_fhead;
  memcpy(&raw_fhead, &tmp_fhead, sizeof(tmp_fhead));
  if (raw_fhead != 0) {
    total_size += 1 + 8;
  }

  // double fHei = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fhei = this->_internal_fhei();
  uint64_t raw_fhei;
  memcpy(&raw_fhei, &tmp_fhei, sizeof(tmp_fhei));
  if (raw_fhei != 0) {
    total_size += 1 + 8;
  }

  // double fV = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fv = this->_internal_fv();
  uint64_t raw_fv;
  memcpy(&raw_fv, &tmp_fv, sizeof(tmp_fv));
  if (raw_fv != 0) {
    total_size += 1 + 8;
  }

  // int32 state = 6;
  if (this->_internal_state() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  // int32 SSR = 7;
  if (this->_internal_ssr() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ssr());
  }

  // int64 Address = 9;
  if (this->_internal_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_address());
  }

  // int64 currTime = 10;
  if (this->_internal_currtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_currtime());
  }

  // int32 id = 8;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FusionRetMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FusionRetMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FusionRetMessage::GetClassData() const { return &_class_data_; }

void FusionRetMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FusionRetMessage *>(to)->MergeFrom(
      static_cast<const FusionRetMessage &>(from));
}


void FusionRetMessage::MergeFrom(const FusionRetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FusionRetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_callno().empty()) {
    _internal_set_callno(from._internal_callno());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fx = from._internal_fx();
  uint64_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    _internal_set_fx(from._internal_fx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fy = from._internal_fy();
  uint64_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    _internal_set_fy(from._internal_fy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fhead = from._internal_fhead();
  uint64_t raw_fhead;
  memcpy(&raw_fhead, &tmp_fhead, sizeof(tmp_fhead));
  if (raw_fhead != 0) {
    _internal_set_fhead(from._internal_fhead());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fhei = from._internal_fhei();
  uint64_t raw_fhei;
  memcpy(&raw_fhei, &tmp_fhei, sizeof(tmp_fhei));
  if (raw_fhei != 0) {
    _internal_set_fhei(from._internal_fhei());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fv = from._internal_fv();
  uint64_t raw_fv;
  memcpy(&raw_fv, &tmp_fv, sizeof(tmp_fv));
  if (raw_fv != 0) {
    _internal_set_fv(from._internal_fv());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_ssr() != 0) {
    _internal_set_ssr(from._internal_ssr());
  }
  if (from._internal_address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_currtime() != 0) {
    _internal_set_currtime(from._internal_currtime());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FusionRetMessage::CopyFrom(const FusionRetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FusionRetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionRetMessage::IsInitialized() const {
  return true;
}

void FusionRetMessage::InternalSwap(FusionRetMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &callno_, lhs_arena,
      &other->callno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FusionRetMessage, id_)
      + sizeof(FusionRetMessage::id_)
      - PROTOBUF_FIELD_OFFSET(FusionRetMessage, fx_)>(
          reinterpret_cast<char*>(&fx_),
          reinterpret_cast<char*>(&other->fx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FusionRetMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fusion_2eproto_getter, &descriptor_table_fusion_2eproto_once,
      file_level_metadata_fusion_2eproto[2]);
}

// ===================================================================

FusionUnitMessage_AssMapEntry_DoNotUse::FusionUnitMessage_AssMapEntry_DoNotUse() {}
FusionUnitMessage_AssMapEntry_DoNotUse::FusionUnitMessage_AssMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FusionUnitMessage_AssMapEntry_DoNotUse::MergeFrom(const FusionUnitMessage_AssMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FusionUnitMessage_AssMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fusion_2eproto_getter, &descriptor_table_fusion_2eproto_once,
      file_level_metadata_fusion_2eproto[3]);
}

// ===================================================================

class FusionUnitMessage::_Internal {
 public:
  static const ::FusionRetMessage& fret(const FusionUnitMessage* msg);
};

const ::FusionRetMessage&
FusionUnitMessage::_Internal::fret(const FusionUnitMessage* msg) {
  return *msg->fret_;
}
FusionUnitMessage::FusionUnitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assmap_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FusionUnitMessage)
}
FusionUnitMessage::FusionUnitMessage(const FusionUnitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assmap_.MergeFrom(from.assmap_);
  if (from._internal_has_fret()) {
    fret_ = new ::FusionRetMessage(*from.fret_);
  } else {
    fret_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&newtrackno_) -
    reinterpret_cast<char*>(&time_)) + sizeof(newtrackno_));
  // @@protoc_insertion_point(copy_constructor:FusionUnitMessage)
}

inline void FusionUnitMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fret_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&newtrackno_) -
    reinterpret_cast<char*>(&fret_)) + sizeof(newtrackno_));
}

FusionUnitMessage::~FusionUnitMessage() {
  // @@protoc_insertion_point(destructor:FusionUnitMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FusionUnitMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fret_;
}

void FusionUnitMessage::ArenaDtor(void* object) {
  FusionUnitMessage* _this = reinterpret_cast< FusionUnitMessage* >(object);
  (void)_this;
  _this->assmap_. ~MapField();
}
inline void FusionUnitMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &FusionUnitMessage::ArenaDtor);
  }
}
void FusionUnitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FusionUnitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:FusionUnitMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assmap_.Clear();
  if (GetArenaForAllocation() == nullptr && fret_ != nullptr) {
    delete fret_;
  }
  fret_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newtrackno_) -
      reinterpret_cast<char*>(&time_)) + sizeof(newtrackno_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FusionUnitMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 newTrackNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          newtrackno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .AssTrackMessage> assMap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&assmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .FusionRetMessage fRet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fret(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FusionUnitMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FusionUnitMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int32 flag = 2;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_flag(), target);
  }

  // int32 newTrackNo = 3;
  if (this->_internal_newtrackno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_newtrackno(), target);
  }

  // map<int32, .AssTrackMessage> assMap = 4;
  if (!this->_internal_assmap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_assmap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_assmap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >::const_iterator
          it = this->_internal_assmap().begin();
          it != this->_internal_assmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FusionUnitMessage_AssMapEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >::const_iterator
          it = this->_internal_assmap().begin();
          it != this->_internal_assmap().end(); ++it) {
        target = FusionUnitMessage_AssMapEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // .FusionRetMessage fRet = 5;
  if (this->_internal_has_fret()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fret(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FusionUnitMessage)
  return target;
}

size_t FusionUnitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FusionUnitMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .AssTrackMessage> assMap = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::AssTrackMessage >::const_iterator
      it = this->_internal_assmap().begin();
      it != this->_internal_assmap().end(); ++it) {
    total_size += FusionUnitMessage_AssMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .FusionRetMessage fRet = 5;
  if (this->_internal_has_fret()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fret_);
  }

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int32 flag = 2;
  if (this->_internal_flag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flag());
  }

  // int32 newTrackNo = 3;
  if (this->_internal_newtrackno() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_newtrackno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FusionUnitMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FusionUnitMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FusionUnitMessage::GetClassData() const { return &_class_data_; }

void FusionUnitMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FusionUnitMessage *>(to)->MergeFrom(
      static_cast<const FusionUnitMessage &>(from));
}


void FusionUnitMessage::MergeFrom(const FusionUnitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FusionUnitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  assmap_.MergeFrom(from.assmap_);
  if (from._internal_has_fret()) {
    _internal_mutable_fret()->::FusionRetMessage::MergeFrom(from._internal_fret());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (from._internal_newtrackno() != 0) {
    _internal_set_newtrackno(from._internal_newtrackno());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FusionUnitMessage::CopyFrom(const FusionUnitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FusionUnitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionUnitMessage::IsInitialized() const {
  return true;
}

void FusionUnitMessage::InternalSwap(FusionUnitMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  assmap_.InternalSwap(&other->assmap_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FusionUnitMessage, newtrackno_)
      + sizeof(FusionUnitMessage::newtrackno_)
      - PROTOBUF_FIELD_OFFSET(FusionUnitMessage, fret_)>(
          reinterpret_cast<char*>(&fret_),
          reinterpret_cast<char*>(&other->fret_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FusionUnitMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fusion_2eproto_getter, &descriptor_table_fusion_2eproto_once,
      file_level_metadata_fusion_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RadarTrackMessage* Arena::CreateMaybeMessage< ::RadarTrackMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RadarTrackMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AssTrackMessage* Arena::CreateMaybeMessage< ::AssTrackMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AssTrackMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::FusionRetMessage* Arena::CreateMaybeMessage< ::FusionRetMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FusionRetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::FusionUnitMessage_AssMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::FusionUnitMessage_AssMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FusionUnitMessage_AssMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FusionUnitMessage* Arena::CreateMaybeMessage< ::FusionUnitMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FusionUnitMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
